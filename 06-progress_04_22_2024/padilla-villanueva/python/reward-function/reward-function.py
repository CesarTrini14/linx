# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KAC6NajnbiBGwt381Z6BfY2GLc8LUV8a
"""

import numpy as np
#importaamos las bibliotecas que useremos

"""#Definimos la función de recompensa
\begin{equation*}
    \xi _j = S_jP_je^{\left(\frac{(t_{j}^{E})-t_{j}^{R}}{\sigma}\right)^2}+(P_j^D)(d_j)({g(k))}
  \end{equation*}

"""

def xi_j(S_j, P_j, t_j_E, t_j_R, sigma, P_j_D, d_j, g_k):
    return S_j * P_j * np.exp(((t_j_E - t_j_R) / sigma) ** 2) + (P_j_D * d_j * g_k)

"""#Definimos la metrica de desempeño general para el nano satelite
\begin{equation*}
\mathcal{\xi} = \sum_{j=1}^{J} \mathcal{\xi}_j + \frac{\alpha}{N} \sum_{i=1}^{N} \left( \frac{E_i - E_L}{E_{max} - E_L} \right)
\end{equation*}
"""

def xi(xi_j_values, alpha, E, E_L, E_max):
    J = len(xi_j_values)
    N = len(E)
    sum_xi_j = np.sum(xi_j_values)
    sum_battery = np.sum((E - E_L) / (E_max - E_L))
    return sum_xi_j + (alpha / N) * sum_battery

"""##Ejemplo de uso de la función"""

# Example usage
S_j = 1
P_j = 1
t_j_E = 10
t_j_R = 5
sigma = 2
P_j_D = 1
d_j = 0.5
g_k = 0.1

xi_j_value = xi_j(S_j, P_j, t_j_E, t_j_R, sigma, P_j_D, d_j, g_k)

alpha = 0.5
E = np.array([0.1, 0.2, 0.3])
E_L = 0.0
E_max = 1.0

xi_value = xi([xi_j_value], alpha, E, E_L, E_max)

print("Value of xi_j:", xi_j_value)
print("Value of xi:", xi_value)